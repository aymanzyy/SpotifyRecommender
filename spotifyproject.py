# -*- coding: utf-8 -*-
"""SpotifyProject

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f-JKbKRgfM7u_xUg4gGKKAf-sCpp1TwF
"""

import warnings
from sklearn.manifold import TSNE
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm
sns.set()
#data = pd.read_csv("spotify.csv")
#data.head()
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

pip install spotipy --upgrade
import spotipy
import spotipy.util as util
from spotipy.oauth2 import SpotifyClientCredentials
from collections import defaultdict
from sklearn.metrics import euclidean_distances
from scipy.spatial.distance import cdist
import difflib

#Set up Spotify credentials

cid = "68dcbe512dc7488180a5ae53b07f053c"
secret = "4c10783cc927402cb82038e0167f9d59"
username = "5i532i2i87807w48betj7v7c0"
client_credentials_manager = SpotifyClientCredentials(client_id=cid, client_secret=secret)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)
playlists = sp.user_playlists(username)

from skimage import io
import matplotlib.pyplot as plt

def visualize_cover_art(playlist_df):
    temp = playlist_df['url'].values
    plt.figure(figsize=(15,int(0.625 * len(temp))) , facecolor='#8cfc03')
    columns = 5
    
    for i, url in enumerate(temp):
        plt.subplot(len(temp) / columns + 1, columns, i + 1)

        image = io.imread(url)
        plt.imshow(image)
        plt.xticks([])
        plt.yticks([])
        s='' 
        plt.xlabel(s.join(playlist_df['track_name'].values[i].split(' ')[:4]), fontsize = 10, fontweight='bold')
        plt.tight_layout(h_pad=0.8, w_pad=0)
        plt.subplots_adjust(wspace=None, hspace=None)

    plt.show()


def get_playlist_tracks(username, playlist_id):
  tracks_list= []
  results = sp.user_playlist(username, playlist_id,
  fields="tracks,next")
  tracks = results['tracks']
  while tracks:
     tracks_list += [ item['track'] for (i, item) in
     enumerate(tracks['items']) ]
     tracks = sp.next(tracks)
  return tracks_list

#modified get features function
def get_audio_features (track_URIs) :
  features = []
  r = splitlist(track_URIs,50)
  for pack in range(len(r)):
     features = features + (sp.audio_features(r[pack]))
  df = pd.DataFrame.from_dict(features)
  df["uri"] = track_URIs
  return df


def call_playlist(creator, playlist_id):
    
    #step1

    playlist_features_list = ["artist","album","track_name",  "track_id","danceability","energy","key","loudness","mode", "speechiness","instrumentalness","liveness","valence","tempo", "duration_ms","time_signature", 'url']
    
    playlist_df = pd.DataFrame(columns = playlist_features_list)
    
    #step2
    
    playlist = sp.user_playlist_tracks(creator, playlist_id)["items"]
    for track in playlist:
        # Create empty dict
        playlist_features = {}
        # Get metadata
        playlist_features["artist"] = track["track"]["album"]["artists"][0]["name"]
        playlist_features["album"] = track["track"]["album"]["name"]
        playlist_features["track_name"] = track["track"]["name"]
        playlist_features["track_id"] = track["track"]["id"]
        playlist_features['url'] = track['track']['album']['images'][1]['url']
        
        
        # Get audio features
        audio_features = sp.audio_features(playlist_features["track_id"])[0]
        for feature in playlist_features_list[4:]:
            playlist_features[feature] = audio_features[feature]
        
        # Concat the dfs
        track_df = pd.DataFrame(playlist_features, index = [0])
        playlist_df = pd.concat([playlist_df, track_df], ignore_index = True)

    #Step 3
        
    return playlist_df




number_cols = ['danceability', 'energy', 'loudness', 'tempo',  'speechiness',  'liveness', 'valence']


def get_mean_vector(song_list, song_data):
    
    song_vectors = []
    
    for song in song_list:
        song_vector = song_data[number_cols].values
        song_vectors.append(song_vector)  
    
    song_matrix = np.array(list(song_vectors))
    return np.mean(song_matrix, axis=0)



def recommend_songs(song_list, rec_list, n_songs=10):
  song_cluster_pipeline = Pipeline([('scaler', StandardScaler()), 
                                  ('kmeans', KMeans(n_clusters=20, 
                                   verbose=False))
                                 ], verbose=False)
  X = rec_list.select_dtypes(np.number)
  song_cluster_pipeline.fit(X[number_cols])

  spotify_data = rec_list[number_cols]
  song_list = song_list[number_cols]

  song_center = np.mean(song_list)
  scaler = song_cluster_pipeline.steps[0][1]
  scaled_data = scaler.transform(spotify_data[number_cols])
  scaled_song_center = scaler.transform(np.array(song_center).reshape(1, -1))
  distances = cdist(scaled_song_center, scaled_data, 'cosine')
  index = list(np.argsort(distances)[:, :10][0])

  rec_songs = rec_list.iloc[index]
  #rec_songs = rec_songs[~rec_songs['track_name'].isin(song_dict['track_name'])]

  return rec_songs

party = call_playlist("aymanzyy","62qqRp0xMCCsHFWxWEpN98")
late_night = call_playlist("aymanzyy", "1Uy9fs3MDdIGnFQFbu6Ddg")
spotty = call_playlist("spotify", "37i9dQZF1DXcBWIGoYBM5M")
recommend_songs(party, spotty)

sns.distplot(party[['danceability']],color='indianred',axlabel='Danceability')
sns.distplot(late_night[['danceability']],color='mediumslateblue',axlabel='Danceability')

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
import plotly.express as px 

new_df = pd.DataFrame()

cluster_pipeline = Pipeline([('scaler', StandardScaler()), ('kmeans', KMeans(n_clusters=10))])
X = party['danceability']
cluster_pipeline.fit(np.array(X).reshape(-1,1))
new_df['cluster'] = cluster_pipeline.predict(np.array(X).reshape(-1,1))


tsne_pipeline = Pipeline([('scaler', StandardScaler()), ('tsne', TSNE(n_components=2, verbose=1))])
genre_embedding = tsne_pipeline.fit_transform(np.array(df['danceability']).reshape(-1,1))
projection = pd.DataFrame(columns=['x', 'y'], data=genre_embedding)
projection['cluster'] = new_df['cluster']
#projection['genres'] = genre_data['genres']
#projection['cluster'] = genre_data['cluster']




fig = px.scatter(
    projection, x= 'x', y = 'y', color='cluster')
fig.show()

f,ax = plt.subplots(figsize=(14,10))
sns.heatmap(party.corr(),annot = True,fmt = ".1f",ax = ax)
plt.show()

